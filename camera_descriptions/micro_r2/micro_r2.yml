# SPDX-FileCopyrightText: Â© 2019 Robin Ole Heinemann <robin.ole.heinemann@gmail.com>
# SPDX-License-Identifier: CC-BY-SA-4.0

camera_model: "micro-r2"

devices:
    sensor_io:
        channel:
            mode: "memory-map"
            base: 0x41200000
            len: 4096
        raw: "sensor_io_raw.yml"
        cooked: "sensor_io_cooked.yml"
    ar0330:
        channel:
            mode: "i2c-cdev"
            bus: 0
            address: 0x10
            address_bytes: 2
        raw: "ar0330_raw.yml"
        cooked: "ar0330_cooked.yml"
        computed: "ar0330_computed.yml"
    drp:
        channel:
            mode: "memory-map"
            base: 0x40000010
            bytes_per_word: 2
            len: 4096
        cooked: "mmcm_drp_cooked.yml"

globals:
  extclock: 24000000
  default_bitstream: no_patch.bit.bin
  gain: |
    function (reg_a, reg_b)
       return reg_a * reg_b
    end
  default_gain: gain(1, 2)

scripts:
  test:
    description:
    uses:
      - ar0330
      - sensor_io
    script: |
      sensor_io.raw.reset = 7
      sensor_io.raw.reset = 0
      sensor_io.raw.reset = 7
      ar0330.computed.analog_gain = 2

      scripts.kick(devices)
      print("hello from lua: " .. scripts.test2(devices))
      print("now running a rust script from lua " .. scripts.rust_test(devices, {test = "riea"}))

      return extclock .. ", " .. scripts.test2(devices)

  test2:
    description:
    uses:
      - ar0330
    script: |
      print("testing lua to lua argument passing", scripts.test3(devices, {a = 1, b = 34.7, c = "abcd", d = {}}))
      return ar0330.computed.analog_gain

  test3:
    description:
    uses:
      - ar0330
    script: |
      print("a", a)
      print("b", b)
      print("c", c)
      print("d", d)
      ar0330.raw.analog_gain = 3
      return ar0330.computed.analog_gain
    args:
      a: int
      b: float
      c: string
      d: binary


# init: |
#   ar0330.computed.analog_gain = 2
